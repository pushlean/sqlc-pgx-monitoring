// Code generated by mockery v2.50.1. DO NOT EDIT.

package trace

import (
	attribute "go.opentelemetry.io/otel/attribute"
	codes "go.opentelemetry.io/otel/codes"

	mock "github.com/stretchr/testify/mock"

	trace "go.opentelemetry.io/otel/trace"
	"go.opentelemetry.io/otel/trace/embedded"
)

// MockSpan is an autogenerated mock type for the Span type
type MockSpan struct {
	mock.Mock
	embedded.Span
}

type MockSpan_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSpan) EXPECT() *MockSpan_Expecter {
	return &MockSpan_Expecter{mock: &_m.Mock}
}

// AddEvent provides a mock function with given fields: name, options
func (_m *MockSpan) AddEvent(name string, options ...trace.EventOption) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockSpan_AddEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddEvent'
type MockSpan_AddEvent_Call struct {
	*mock.Call
}

// AddEvent is a helper method to define mock.On call
//   - name string
//   - options ...trace.EventOption
func (_e *MockSpan_Expecter) AddEvent(name interface{}, options ...interface{}) *MockSpan_AddEvent_Call {
	return &MockSpan_AddEvent_Call{Call: _e.mock.On("AddEvent",
		append([]interface{}{name}, options...)...)}
}

func (_c *MockSpan_AddEvent_Call) Run(run func(name string, options ...trace.EventOption)) *MockSpan_AddEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]trace.EventOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(trace.EventOption)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockSpan_AddEvent_Call) Return() *MockSpan_AddEvent_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSpan_AddEvent_Call) RunAndReturn(run func(string, ...trace.EventOption)) *MockSpan_AddEvent_Call {
	_c.Run(run)
	return _c
}

// AddLink provides a mock function with given fields: link
func (_m *MockSpan) AddLink(link trace.Link) {
	_m.Called(link)
}

// MockSpan_AddLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddLink'
type MockSpan_AddLink_Call struct {
	*mock.Call
}

// AddLink is a helper method to define mock.On call
//   - link trace.Link
func (_e *MockSpan_Expecter) AddLink(link interface{}) *MockSpan_AddLink_Call {
	return &MockSpan_AddLink_Call{Call: _e.mock.On("AddLink", link)}
}

func (_c *MockSpan_AddLink_Call) Run(run func(link trace.Link)) *MockSpan_AddLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(trace.Link))
	})
	return _c
}

func (_c *MockSpan_AddLink_Call) Return() *MockSpan_AddLink_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSpan_AddLink_Call) RunAndReturn(run func(trace.Link)) *MockSpan_AddLink_Call {
	_c.Run(run)
	return _c
}

// End provides a mock function with given fields: options
func (_m *MockSpan) End(options ...trace.SpanEndOption) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockSpan_End_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'End'
type MockSpan_End_Call struct {
	*mock.Call
}

// End is a helper method to define mock.On call
//   - options ...trace.SpanEndOption
func (_e *MockSpan_Expecter) End(options ...interface{}) *MockSpan_End_Call {
	return &MockSpan_End_Call{Call: _e.mock.On("End",
		append([]interface{}{}, options...)...)}
}

func (_c *MockSpan_End_Call) Run(run func(options ...trace.SpanEndOption)) *MockSpan_End_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]trace.SpanEndOption, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(trace.SpanEndOption)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockSpan_End_Call) Return() *MockSpan_End_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSpan_End_Call) RunAndReturn(run func(...trace.SpanEndOption)) *MockSpan_End_Call {
	_c.Run(run)
	return _c
}

// IsRecording provides a mock function with no fields
func (_m *MockSpan) IsRecording() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsRecording")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockSpan_IsRecording_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsRecording'
type MockSpan_IsRecording_Call struct {
	*mock.Call
}

// IsRecording is a helper method to define mock.On call
func (_e *MockSpan_Expecter) IsRecording() *MockSpan_IsRecording_Call {
	return &MockSpan_IsRecording_Call{Call: _e.mock.On("IsRecording")}
}

func (_c *MockSpan_IsRecording_Call) Run(run func()) *MockSpan_IsRecording_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSpan_IsRecording_Call) Return(_a0 bool) *MockSpan_IsRecording_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSpan_IsRecording_Call) RunAndReturn(run func() bool) *MockSpan_IsRecording_Call {
	_c.Call.Return(run)
	return _c
}

// RecordError provides a mock function with given fields: err, options
func (_m *MockSpan) RecordError(err error, options ...trace.EventOption) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, err)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockSpan_RecordError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordError'
type MockSpan_RecordError_Call struct {
	*mock.Call
}

// RecordError is a helper method to define mock.On call
//   - err error
//   - options ...trace.EventOption
func (_e *MockSpan_Expecter) RecordError(err interface{}, options ...interface{}) *MockSpan_RecordError_Call {
	return &MockSpan_RecordError_Call{Call: _e.mock.On("RecordError",
		append([]interface{}{err}, options...)...)}
}

func (_c *MockSpan_RecordError_Call) Run(run func(err error, options ...trace.EventOption)) *MockSpan_RecordError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]trace.EventOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(trace.EventOption)
			}
		}
		run(args[0].(error), variadicArgs...)
	})
	return _c
}

func (_c *MockSpan_RecordError_Call) Return() *MockSpan_RecordError_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSpan_RecordError_Call) RunAndReturn(run func(error, ...trace.EventOption)) *MockSpan_RecordError_Call {
	_c.Run(run)
	return _c
}

// SetAttributes provides a mock function with given fields: kv
func (_m *MockSpan) SetAttributes(kv ...attribute.KeyValue) {
	_va := make([]interface{}, len(kv))
	for _i := range kv {
		_va[_i] = kv[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockSpan_SetAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAttributes'
type MockSpan_SetAttributes_Call struct {
	*mock.Call
}

// SetAttributes is a helper method to define mock.On call
//   - kv ...attribute.KeyValue
func (_e *MockSpan_Expecter) SetAttributes(kv ...interface{}) *MockSpan_SetAttributes_Call {
	return &MockSpan_SetAttributes_Call{Call: _e.mock.On("SetAttributes",
		append([]interface{}{}, kv...)...)}
}

func (_c *MockSpan_SetAttributes_Call) Run(run func(kv ...attribute.KeyValue)) *MockSpan_SetAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]attribute.KeyValue, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(attribute.KeyValue)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockSpan_SetAttributes_Call) Return() *MockSpan_SetAttributes_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSpan_SetAttributes_Call) RunAndReturn(run func(...attribute.KeyValue)) *MockSpan_SetAttributes_Call {
	_c.Run(run)
	return _c
}

// SetName provides a mock function with given fields: name
func (_m *MockSpan) SetName(name string) {
	_m.Called(name)
}

// MockSpan_SetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetName'
type MockSpan_SetName_Call struct {
	*mock.Call
}

// SetName is a helper method to define mock.On call
//   - name string
func (_e *MockSpan_Expecter) SetName(name interface{}) *MockSpan_SetName_Call {
	return &MockSpan_SetName_Call{Call: _e.mock.On("SetName", name)}
}

func (_c *MockSpan_SetName_Call) Run(run func(name string)) *MockSpan_SetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSpan_SetName_Call) Return() *MockSpan_SetName_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSpan_SetName_Call) RunAndReturn(run func(string)) *MockSpan_SetName_Call {
	_c.Run(run)
	return _c
}

// SetStatus provides a mock function with given fields: code, description
func (_m *MockSpan) SetStatus(code codes.Code, description string) {
	_m.Called(code, description)
}

// MockSpan_SetStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetStatus'
type MockSpan_SetStatus_Call struct {
	*mock.Call
}

// SetStatus is a helper method to define mock.On call
//   - code codes.Code
//   - description string
func (_e *MockSpan_Expecter) SetStatus(code interface{}, description interface{}) *MockSpan_SetStatus_Call {
	return &MockSpan_SetStatus_Call{Call: _e.mock.On("SetStatus", code, description)}
}

func (_c *MockSpan_SetStatus_Call) Run(run func(code codes.Code, description string)) *MockSpan_SetStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(codes.Code), args[1].(string))
	})
	return _c
}

func (_c *MockSpan_SetStatus_Call) Return() *MockSpan_SetStatus_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSpan_SetStatus_Call) RunAndReturn(run func(codes.Code, string)) *MockSpan_SetStatus_Call {
	_c.Run(run)
	return _c
}

// SpanContext provides a mock function with no fields
func (_m *MockSpan) SpanContext() trace.SpanContext {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SpanContext")
	}

	var r0 trace.SpanContext
	if rf, ok := ret.Get(0).(func() trace.SpanContext); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(trace.SpanContext)
	}

	return r0
}

// MockSpan_SpanContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SpanContext'
type MockSpan_SpanContext_Call struct {
	*mock.Call
}

// SpanContext is a helper method to define mock.On call
func (_e *MockSpan_Expecter) SpanContext() *MockSpan_SpanContext_Call {
	return &MockSpan_SpanContext_Call{Call: _e.mock.On("SpanContext")}
}

func (_c *MockSpan_SpanContext_Call) Run(run func()) *MockSpan_SpanContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSpan_SpanContext_Call) Return(_a0 trace.SpanContext) *MockSpan_SpanContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSpan_SpanContext_Call) RunAndReturn(run func() trace.SpanContext) *MockSpan_SpanContext_Call {
	_c.Call.Return(run)
	return _c
}

// TracerProvider provides a mock function with no fields
func (_m *MockSpan) TracerProvider() trace.TracerProvider {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TracerProvider")
	}

	var r0 trace.TracerProvider
	if rf, ok := ret.Get(0).(func() trace.TracerProvider); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(trace.TracerProvider)
		}
	}

	return r0
}

// MockSpan_TracerProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TracerProvider'
type MockSpan_TracerProvider_Call struct {
	*mock.Call
}

// TracerProvider is a helper method to define mock.On call
func (_e *MockSpan_Expecter) TracerProvider() *MockSpan_TracerProvider_Call {
	return &MockSpan_TracerProvider_Call{Call: _e.mock.On("TracerProvider")}
}

func (_c *MockSpan_TracerProvider_Call) Run(run func()) *MockSpan_TracerProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSpan_TracerProvider_Call) Return(_a0 trace.TracerProvider) *MockSpan_TracerProvider_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSpan_TracerProvider_Call) RunAndReturn(run func() trace.TracerProvider) *MockSpan_TracerProvider_Call {
	_c.Call.Return(run)
	return _c
}

// span provides a mock function with no fields
func (_m *MockSpan) span() {
	_m.Called()
}

// MockSpan_span_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'span'
type MockSpan_span_Call struct {
	*mock.Call
}

// span is a helper method to define mock.On call
func (_e *MockSpan_Expecter) span() *MockSpan_span_Call {
	return &MockSpan_span_Call{Call: _e.mock.On("span")}
}

func (_c *MockSpan_span_Call) Run(run func()) *MockSpan_span_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSpan_span_Call) Return() *MockSpan_span_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSpan_span_Call) RunAndReturn(run func()) *MockSpan_span_Call {
	_c.Run(run)
	return _c
}

// NewMockSpan creates a new instance of MockSpan. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSpan(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockSpan {
	mock := &MockSpan{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
