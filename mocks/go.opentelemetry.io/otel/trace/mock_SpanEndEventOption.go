// Code generated by mockery v2.50.1. DO NOT EDIT.

package trace

import (
	mock "github.com/stretchr/testify/mock"
	trace "go.opentelemetry.io/otel/trace"
)

// MockSpanEndEventOption is an autogenerated mock type for the SpanEndEventOption type
type MockSpanEndEventOption struct {
	mock.Mock
}

type MockSpanEndEventOption_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSpanEndEventOption) EXPECT() *MockSpanEndEventOption_Expecter {
	return &MockSpanEndEventOption_Expecter{mock: &_m.Mock}
}

// applyEvent provides a mock function with given fields: _a0
func (_m *MockSpanEndEventOption) applyEvent(_a0 trace.EventConfig) trace.EventConfig {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for applyEvent")
	}

	var r0 trace.EventConfig
	if rf, ok := ret.Get(0).(func(trace.EventConfig) trace.EventConfig); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(trace.EventConfig)
	}

	return r0
}

// MockSpanEndEventOption_applyEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'applyEvent'
type MockSpanEndEventOption_applyEvent_Call struct {
	*mock.Call
}

// applyEvent is a helper method to define mock.On call
//   - _a0 trace.EventConfig
func (_e *MockSpanEndEventOption_Expecter) applyEvent(_a0 interface{}) *MockSpanEndEventOption_applyEvent_Call {
	return &MockSpanEndEventOption_applyEvent_Call{Call: _e.mock.On("applyEvent", _a0)}
}

func (_c *MockSpanEndEventOption_applyEvent_Call) Run(run func(_a0 trace.EventConfig)) *MockSpanEndEventOption_applyEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(trace.EventConfig))
	})
	return _c
}

func (_c *MockSpanEndEventOption_applyEvent_Call) Return(_a0 trace.EventConfig) *MockSpanEndEventOption_applyEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSpanEndEventOption_applyEvent_Call) RunAndReturn(run func(trace.EventConfig) trace.EventConfig) *MockSpanEndEventOption_applyEvent_Call {
	_c.Call.Return(run)
	return _c
}

// applySpanEnd provides a mock function with given fields: _a0
func (_m *MockSpanEndEventOption) applySpanEnd(_a0 trace.SpanConfig) trace.SpanConfig {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for applySpanEnd")
	}

	var r0 trace.SpanConfig
	if rf, ok := ret.Get(0).(func(trace.SpanConfig) trace.SpanConfig); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(trace.SpanConfig)
	}

	return r0
}

// MockSpanEndEventOption_applySpanEnd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'applySpanEnd'
type MockSpanEndEventOption_applySpanEnd_Call struct {
	*mock.Call
}

// applySpanEnd is a helper method to define mock.On call
//   - _a0 trace.SpanConfig
func (_e *MockSpanEndEventOption_Expecter) applySpanEnd(_a0 interface{}) *MockSpanEndEventOption_applySpanEnd_Call {
	return &MockSpanEndEventOption_applySpanEnd_Call{Call: _e.mock.On("applySpanEnd", _a0)}
}

func (_c *MockSpanEndEventOption_applySpanEnd_Call) Run(run func(_a0 trace.SpanConfig)) *MockSpanEndEventOption_applySpanEnd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(trace.SpanConfig))
	})
	return _c
}

func (_c *MockSpanEndEventOption_applySpanEnd_Call) Return(_a0 trace.SpanConfig) *MockSpanEndEventOption_applySpanEnd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSpanEndEventOption_applySpanEnd_Call) RunAndReturn(run func(trace.SpanConfig) trace.SpanConfig) *MockSpanEndEventOption_applySpanEnd_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSpanEndEventOption creates a new instance of MockSpanEndEventOption. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSpanEndEventOption(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSpanEndEventOption {
	mock := &MockSpanEndEventOption{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
