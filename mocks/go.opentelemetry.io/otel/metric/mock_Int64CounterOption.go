// Code generated by mockery v2.50.1. DO NOT EDIT.

package metric

import (
	mock "github.com/stretchr/testify/mock"
	metric "go.opentelemetry.io/otel/metric"
)

// MockInt64CounterOption is an autogenerated mock type for the Int64CounterOption type
type MockInt64CounterOption struct {
	mock.Mock
}

type MockInt64CounterOption_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInt64CounterOption) EXPECT() *MockInt64CounterOption_Expecter {
	return &MockInt64CounterOption_Expecter{mock: &_m.Mock}
}

// applyInt64Counter provides a mock function with given fields: _a0
func (_m *MockInt64CounterOption) applyInt64Counter(_a0 metric.Int64CounterConfig) metric.Int64CounterConfig {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for applyInt64Counter")
	}

	var r0 metric.Int64CounterConfig
	if rf, ok := ret.Get(0).(func(metric.Int64CounterConfig) metric.Int64CounterConfig); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(metric.Int64CounterConfig)
	}

	return r0
}

// MockInt64CounterOption_applyInt64Counter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'applyInt64Counter'
type MockInt64CounterOption_applyInt64Counter_Call struct {
	*mock.Call
}

// applyInt64Counter is a helper method to define mock.On call
//   - _a0 metric.Int64CounterConfig
func (_e *MockInt64CounterOption_Expecter) applyInt64Counter(_a0 interface{}) *MockInt64CounterOption_applyInt64Counter_Call {
	return &MockInt64CounterOption_applyInt64Counter_Call{Call: _e.mock.On("applyInt64Counter", _a0)}
}

func (_c *MockInt64CounterOption_applyInt64Counter_Call) Run(run func(_a0 metric.Int64CounterConfig)) *MockInt64CounterOption_applyInt64Counter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(metric.Int64CounterConfig))
	})
	return _c
}

func (_c *MockInt64CounterOption_applyInt64Counter_Call) Return(_a0 metric.Int64CounterConfig) *MockInt64CounterOption_applyInt64Counter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInt64CounterOption_applyInt64Counter_Call) RunAndReturn(run func(metric.Int64CounterConfig) metric.Int64CounterConfig) *MockInt64CounterOption_applyInt64Counter_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockInt64CounterOption creates a new instance of MockInt64CounterOption. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInt64CounterOption(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInt64CounterOption {
	mock := &MockInt64CounterOption{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
