// Code generated by mockery v2.50.1. DO NOT EDIT.

package metric

import (
	mock "github.com/stretchr/testify/mock"
	metric "go.opentelemetry.io/otel/metric"
)

// MockInt64GaugeOption is an autogenerated mock type for the Int64GaugeOption type
type MockInt64GaugeOption struct {
	mock.Mock
}

type MockInt64GaugeOption_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInt64GaugeOption) EXPECT() *MockInt64GaugeOption_Expecter {
	return &MockInt64GaugeOption_Expecter{mock: &_m.Mock}
}

// applyInt64Gauge provides a mock function with given fields: _a0
func (_m *MockInt64GaugeOption) applyInt64Gauge(_a0 metric.Int64GaugeConfig) metric.Int64GaugeConfig {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for applyInt64Gauge")
	}

	var r0 metric.Int64GaugeConfig
	if rf, ok := ret.Get(0).(func(metric.Int64GaugeConfig) metric.Int64GaugeConfig); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(metric.Int64GaugeConfig)
	}

	return r0
}

// MockInt64GaugeOption_applyInt64Gauge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'applyInt64Gauge'
type MockInt64GaugeOption_applyInt64Gauge_Call struct {
	*mock.Call
}

// applyInt64Gauge is a helper method to define mock.On call
//   - _a0 metric.Int64GaugeConfig
func (_e *MockInt64GaugeOption_Expecter) applyInt64Gauge(_a0 interface{}) *MockInt64GaugeOption_applyInt64Gauge_Call {
	return &MockInt64GaugeOption_applyInt64Gauge_Call{Call: _e.mock.On("applyInt64Gauge", _a0)}
}

func (_c *MockInt64GaugeOption_applyInt64Gauge_Call) Run(run func(_a0 metric.Int64GaugeConfig)) *MockInt64GaugeOption_applyInt64Gauge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(metric.Int64GaugeConfig))
	})
	return _c
}

func (_c *MockInt64GaugeOption_applyInt64Gauge_Call) Return(_a0 metric.Int64GaugeConfig) *MockInt64GaugeOption_applyInt64Gauge_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInt64GaugeOption_applyInt64Gauge_Call) RunAndReturn(run func(metric.Int64GaugeConfig) metric.Int64GaugeConfig) *MockInt64GaugeOption_applyInt64Gauge_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockInt64GaugeOption creates a new instance of MockInt64GaugeOption. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInt64GaugeOption(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInt64GaugeOption {
	mock := &MockInt64GaugeOption{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
