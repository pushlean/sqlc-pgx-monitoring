// Code generated by mockery v2.50.1. DO NOT EDIT.

package metric

import (
	mock "github.com/stretchr/testify/mock"
	metric "go.opentelemetry.io/otel/metric"
)

// MockAddOption is an autogenerated mock type for the AddOption type
type MockAddOption struct {
	mock.Mock
}

type MockAddOption_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAddOption) EXPECT() *MockAddOption_Expecter {
	return &MockAddOption_Expecter{mock: &_m.Mock}
}

// applyAdd provides a mock function with given fields: _a0
func (_m *MockAddOption) applyAdd(_a0 metric.AddConfig) metric.AddConfig {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for applyAdd")
	}

	var r0 metric.AddConfig
	if rf, ok := ret.Get(0).(func(metric.AddConfig) metric.AddConfig); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(metric.AddConfig)
	}

	return r0
}

// MockAddOption_applyAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'applyAdd'
type MockAddOption_applyAdd_Call struct {
	*mock.Call
}

// applyAdd is a helper method to define mock.On call
//   - _a0 metric.AddConfig
func (_e *MockAddOption_Expecter) applyAdd(_a0 interface{}) *MockAddOption_applyAdd_Call {
	return &MockAddOption_applyAdd_Call{Call: _e.mock.On("applyAdd", _a0)}
}

func (_c *MockAddOption_applyAdd_Call) Run(run func(_a0 metric.AddConfig)) *MockAddOption_applyAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(metric.AddConfig))
	})
	return _c
}

func (_c *MockAddOption_applyAdd_Call) Return(_a0 metric.AddConfig) *MockAddOption_applyAdd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAddOption_applyAdd_Call) RunAndReturn(run func(metric.AddConfig) metric.AddConfig) *MockAddOption_applyAdd_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAddOption creates a new instance of MockAddOption. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAddOption(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAddOption {
	mock := &MockAddOption{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
