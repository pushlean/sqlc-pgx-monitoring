// Code generated by mockery v2.50.1. DO NOT EDIT.

package metric

import mock "github.com/stretchr/testify/mock"

// MockFloat64ObservableCounter is an autogenerated mock type for the Float64ObservableCounter type
type MockFloat64ObservableCounter struct {
	mock.Mock
}

type MockFloat64ObservableCounter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFloat64ObservableCounter) EXPECT() *MockFloat64ObservableCounter_Expecter {
	return &MockFloat64ObservableCounter_Expecter{mock: &_m.Mock}
}

// float64Observable provides a mock function with no fields
func (_m *MockFloat64ObservableCounter) float64Observable() {
	_m.Called()
}

// MockFloat64ObservableCounter_float64Observable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'float64Observable'
type MockFloat64ObservableCounter_float64Observable_Call struct {
	*mock.Call
}

// float64Observable is a helper method to define mock.On call
func (_e *MockFloat64ObservableCounter_Expecter) float64Observable() *MockFloat64ObservableCounter_float64Observable_Call {
	return &MockFloat64ObservableCounter_float64Observable_Call{Call: _e.mock.On("float64Observable")}
}

func (_c *MockFloat64ObservableCounter_float64Observable_Call) Run(run func()) *MockFloat64ObservableCounter_float64Observable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFloat64ObservableCounter_float64Observable_Call) Return() *MockFloat64ObservableCounter_float64Observable_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockFloat64ObservableCounter_float64Observable_Call) RunAndReturn(run func()) *MockFloat64ObservableCounter_float64Observable_Call {
	_c.Run(run)
	return _c
}

// float64ObservableCounter provides a mock function with no fields
func (_m *MockFloat64ObservableCounter) float64ObservableCounter() {
	_m.Called()
}

// MockFloat64ObservableCounter_float64ObservableCounter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'float64ObservableCounter'
type MockFloat64ObservableCounter_float64ObservableCounter_Call struct {
	*mock.Call
}

// float64ObservableCounter is a helper method to define mock.On call
func (_e *MockFloat64ObservableCounter_Expecter) float64ObservableCounter() *MockFloat64ObservableCounter_float64ObservableCounter_Call {
	return &MockFloat64ObservableCounter_float64ObservableCounter_Call{Call: _e.mock.On("float64ObservableCounter")}
}

func (_c *MockFloat64ObservableCounter_float64ObservableCounter_Call) Run(run func()) *MockFloat64ObservableCounter_float64ObservableCounter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFloat64ObservableCounter_float64ObservableCounter_Call) Return() *MockFloat64ObservableCounter_float64ObservableCounter_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockFloat64ObservableCounter_float64ObservableCounter_Call) RunAndReturn(run func()) *MockFloat64ObservableCounter_float64ObservableCounter_Call {
	_c.Run(run)
	return _c
}

// observable provides a mock function with no fields
func (_m *MockFloat64ObservableCounter) observable() {
	_m.Called()
}

// MockFloat64ObservableCounter_observable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'observable'
type MockFloat64ObservableCounter_observable_Call struct {
	*mock.Call
}

// observable is a helper method to define mock.On call
func (_e *MockFloat64ObservableCounter_Expecter) observable() *MockFloat64ObservableCounter_observable_Call {
	return &MockFloat64ObservableCounter_observable_Call{Call: _e.mock.On("observable")}
}

func (_c *MockFloat64ObservableCounter_observable_Call) Run(run func()) *MockFloat64ObservableCounter_observable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFloat64ObservableCounter_observable_Call) Return() *MockFloat64ObservableCounter_observable_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockFloat64ObservableCounter_observable_Call) RunAndReturn(run func()) *MockFloat64ObservableCounter_observable_Call {
	_c.Run(run)
	return _c
}

// NewMockFloat64ObservableCounter creates a new instance of MockFloat64ObservableCounter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFloat64ObservableCounter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFloat64ObservableCounter {
	mock := &MockFloat64ObservableCounter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
