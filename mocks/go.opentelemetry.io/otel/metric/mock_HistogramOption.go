// Code generated by mockery v2.50.1. DO NOT EDIT.

package metric

import (
	mock "github.com/stretchr/testify/mock"
	metric "go.opentelemetry.io/otel/metric"
)

// MockHistogramOption is an autogenerated mock type for the HistogramOption type
type MockHistogramOption struct {
	mock.Mock
}

type MockHistogramOption_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHistogramOption) EXPECT() *MockHistogramOption_Expecter {
	return &MockHistogramOption_Expecter{mock: &_m.Mock}
}

// applyFloat64Histogram provides a mock function with given fields: _a0
func (_m *MockHistogramOption) applyFloat64Histogram(_a0 metric.Float64HistogramConfig) metric.Float64HistogramConfig {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for applyFloat64Histogram")
	}

	var r0 metric.Float64HistogramConfig
	if rf, ok := ret.Get(0).(func(metric.Float64HistogramConfig) metric.Float64HistogramConfig); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(metric.Float64HistogramConfig)
	}

	return r0
}

// MockHistogramOption_applyFloat64Histogram_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'applyFloat64Histogram'
type MockHistogramOption_applyFloat64Histogram_Call struct {
	*mock.Call
}

// applyFloat64Histogram is a helper method to define mock.On call
//   - _a0 metric.Float64HistogramConfig
func (_e *MockHistogramOption_Expecter) applyFloat64Histogram(_a0 interface{}) *MockHistogramOption_applyFloat64Histogram_Call {
	return &MockHistogramOption_applyFloat64Histogram_Call{Call: _e.mock.On("applyFloat64Histogram", _a0)}
}

func (_c *MockHistogramOption_applyFloat64Histogram_Call) Run(run func(_a0 metric.Float64HistogramConfig)) *MockHistogramOption_applyFloat64Histogram_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(metric.Float64HistogramConfig))
	})
	return _c
}

func (_c *MockHistogramOption_applyFloat64Histogram_Call) Return(_a0 metric.Float64HistogramConfig) *MockHistogramOption_applyFloat64Histogram_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHistogramOption_applyFloat64Histogram_Call) RunAndReturn(run func(metric.Float64HistogramConfig) metric.Float64HistogramConfig) *MockHistogramOption_applyFloat64Histogram_Call {
	_c.Call.Return(run)
	return _c
}

// applyInt64Histogram provides a mock function with given fields: _a0
func (_m *MockHistogramOption) applyInt64Histogram(_a0 metric.Int64HistogramConfig) metric.Int64HistogramConfig {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for applyInt64Histogram")
	}

	var r0 metric.Int64HistogramConfig
	if rf, ok := ret.Get(0).(func(metric.Int64HistogramConfig) metric.Int64HistogramConfig); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(metric.Int64HistogramConfig)
	}

	return r0
}

// MockHistogramOption_applyInt64Histogram_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'applyInt64Histogram'
type MockHistogramOption_applyInt64Histogram_Call struct {
	*mock.Call
}

// applyInt64Histogram is a helper method to define mock.On call
//   - _a0 metric.Int64HistogramConfig
func (_e *MockHistogramOption_Expecter) applyInt64Histogram(_a0 interface{}) *MockHistogramOption_applyInt64Histogram_Call {
	return &MockHistogramOption_applyInt64Histogram_Call{Call: _e.mock.On("applyInt64Histogram", _a0)}
}

func (_c *MockHistogramOption_applyInt64Histogram_Call) Run(run func(_a0 metric.Int64HistogramConfig)) *MockHistogramOption_applyInt64Histogram_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(metric.Int64HistogramConfig))
	})
	return _c
}

func (_c *MockHistogramOption_applyInt64Histogram_Call) Return(_a0 metric.Int64HistogramConfig) *MockHistogramOption_applyInt64Histogram_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHistogramOption_applyInt64Histogram_Call) RunAndReturn(run func(metric.Int64HistogramConfig) metric.Int64HistogramConfig) *MockHistogramOption_applyInt64Histogram_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHistogramOption creates a new instance of MockHistogramOption. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHistogramOption(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHistogramOption {
	mock := &MockHistogramOption{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
