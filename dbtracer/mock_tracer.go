// Code generated by mockery. DO NOT EDIT.

package dbtracer

import (
	context "context"

	pgx "github.com/jackc/pgx/v5"
	mock "github.com/stretchr/testify/mock"
)

// MockTracer is an autogenerated mock type for the Tracer type
type MockTracer struct {
	mock.Mock
}

type MockTracer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTracer) EXPECT() *MockTracer_Expecter {
	return &MockTracer_Expecter{mock: &_m.Mock}
}

// TraceBatchEnd provides a mock function with given fields: ctx, conn, data
func (_m *MockTracer) TraceBatchEnd(ctx context.Context, conn *pgx.Conn, data pgx.TraceBatchEndData) {
	_m.Called(ctx, conn, data)
}

// MockTracer_TraceBatchEnd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TraceBatchEnd'
type MockTracer_TraceBatchEnd_Call struct {
	*mock.Call
}

// TraceBatchEnd is a helper method to define mock.On call
//   - ctx context.Context
//   - conn *pgx.Conn
//   - data pgx.TraceBatchEndData
func (_e *MockTracer_Expecter) TraceBatchEnd(ctx interface{}, conn interface{}, data interface{}) *MockTracer_TraceBatchEnd_Call {
	return &MockTracer_TraceBatchEnd_Call{Call: _e.mock.On("TraceBatchEnd", ctx, conn, data)}
}

func (_c *MockTracer_TraceBatchEnd_Call) Run(run func(ctx context.Context, conn *pgx.Conn, data pgx.TraceBatchEndData)) *MockTracer_TraceBatchEnd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pgx.Conn), args[2].(pgx.TraceBatchEndData))
	})
	return _c
}

func (_c *MockTracer_TraceBatchEnd_Call) Return() *MockTracer_TraceBatchEnd_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTracer_TraceBatchEnd_Call) RunAndReturn(run func(context.Context, *pgx.Conn, pgx.TraceBatchEndData)) *MockTracer_TraceBatchEnd_Call {
	_c.Run(run)
	return _c
}

// TraceBatchQuery provides a mock function with given fields: ctx, conn, data
func (_m *MockTracer) TraceBatchQuery(ctx context.Context, conn *pgx.Conn, data pgx.TraceBatchQueryData) {
	_m.Called(ctx, conn, data)
}

// MockTracer_TraceBatchQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TraceBatchQuery'
type MockTracer_TraceBatchQuery_Call struct {
	*mock.Call
}

// TraceBatchQuery is a helper method to define mock.On call
//   - ctx context.Context
//   - conn *pgx.Conn
//   - data pgx.TraceBatchQueryData
func (_e *MockTracer_Expecter) TraceBatchQuery(ctx interface{}, conn interface{}, data interface{}) *MockTracer_TraceBatchQuery_Call {
	return &MockTracer_TraceBatchQuery_Call{Call: _e.mock.On("TraceBatchQuery", ctx, conn, data)}
}

func (_c *MockTracer_TraceBatchQuery_Call) Run(run func(ctx context.Context, conn *pgx.Conn, data pgx.TraceBatchQueryData)) *MockTracer_TraceBatchQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pgx.Conn), args[2].(pgx.TraceBatchQueryData))
	})
	return _c
}

func (_c *MockTracer_TraceBatchQuery_Call) Return() *MockTracer_TraceBatchQuery_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTracer_TraceBatchQuery_Call) RunAndReturn(run func(context.Context, *pgx.Conn, pgx.TraceBatchQueryData)) *MockTracer_TraceBatchQuery_Call {
	_c.Run(run)
	return _c
}

// TraceBatchStart provides a mock function with given fields: ctx, conn, data
func (_m *MockTracer) TraceBatchStart(ctx context.Context, conn *pgx.Conn, data pgx.TraceBatchStartData) context.Context {
	ret := _m.Called(ctx, conn, data)

	if len(ret) == 0 {
		panic("no return value specified for TraceBatchStart")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context, *pgx.Conn, pgx.TraceBatchStartData) context.Context); ok {
		r0 = rf(ctx, conn, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// MockTracer_TraceBatchStart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TraceBatchStart'
type MockTracer_TraceBatchStart_Call struct {
	*mock.Call
}

// TraceBatchStart is a helper method to define mock.On call
//   - ctx context.Context
//   - conn *pgx.Conn
//   - data pgx.TraceBatchStartData
func (_e *MockTracer_Expecter) TraceBatchStart(ctx interface{}, conn interface{}, data interface{}) *MockTracer_TraceBatchStart_Call {
	return &MockTracer_TraceBatchStart_Call{Call: _e.mock.On("TraceBatchStart", ctx, conn, data)}
}

func (_c *MockTracer_TraceBatchStart_Call) Run(run func(ctx context.Context, conn *pgx.Conn, data pgx.TraceBatchStartData)) *MockTracer_TraceBatchStart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pgx.Conn), args[2].(pgx.TraceBatchStartData))
	})
	return _c
}

func (_c *MockTracer_TraceBatchStart_Call) Return(_a0 context.Context) *MockTracer_TraceBatchStart_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTracer_TraceBatchStart_Call) RunAndReturn(run func(context.Context, *pgx.Conn, pgx.TraceBatchStartData) context.Context) *MockTracer_TraceBatchStart_Call {
	_c.Call.Return(run)
	return _c
}

// TraceConnectEnd provides a mock function with given fields: ctx, data
func (_m *MockTracer) TraceConnectEnd(ctx context.Context, data pgx.TraceConnectEndData) {
	_m.Called(ctx, data)
}

// MockTracer_TraceConnectEnd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TraceConnectEnd'
type MockTracer_TraceConnectEnd_Call struct {
	*mock.Call
}

// TraceConnectEnd is a helper method to define mock.On call
//   - ctx context.Context
//   - data pgx.TraceConnectEndData
func (_e *MockTracer_Expecter) TraceConnectEnd(ctx interface{}, data interface{}) *MockTracer_TraceConnectEnd_Call {
	return &MockTracer_TraceConnectEnd_Call{Call: _e.mock.On("TraceConnectEnd", ctx, data)}
}

func (_c *MockTracer_TraceConnectEnd_Call) Run(run func(ctx context.Context, data pgx.TraceConnectEndData)) *MockTracer_TraceConnectEnd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pgx.TraceConnectEndData))
	})
	return _c
}

func (_c *MockTracer_TraceConnectEnd_Call) Return() *MockTracer_TraceConnectEnd_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTracer_TraceConnectEnd_Call) RunAndReturn(run func(context.Context, pgx.TraceConnectEndData)) *MockTracer_TraceConnectEnd_Call {
	_c.Run(run)
	return _c
}

// TraceConnectStart provides a mock function with given fields: ctx, data
func (_m *MockTracer) TraceConnectStart(ctx context.Context, data pgx.TraceConnectStartData) context.Context {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for TraceConnectStart")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context, pgx.TraceConnectStartData) context.Context); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// MockTracer_TraceConnectStart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TraceConnectStart'
type MockTracer_TraceConnectStart_Call struct {
	*mock.Call
}

// TraceConnectStart is a helper method to define mock.On call
//   - ctx context.Context
//   - data pgx.TraceConnectStartData
func (_e *MockTracer_Expecter) TraceConnectStart(ctx interface{}, data interface{}) *MockTracer_TraceConnectStart_Call {
	return &MockTracer_TraceConnectStart_Call{Call: _e.mock.On("TraceConnectStart", ctx, data)}
}

func (_c *MockTracer_TraceConnectStart_Call) Run(run func(ctx context.Context, data pgx.TraceConnectStartData)) *MockTracer_TraceConnectStart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pgx.TraceConnectStartData))
	})
	return _c
}

func (_c *MockTracer_TraceConnectStart_Call) Return(_a0 context.Context) *MockTracer_TraceConnectStart_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTracer_TraceConnectStart_Call) RunAndReturn(run func(context.Context, pgx.TraceConnectStartData) context.Context) *MockTracer_TraceConnectStart_Call {
	_c.Call.Return(run)
	return _c
}

// TraceCopyFromEnd provides a mock function with given fields: ctx, conn, data
func (_m *MockTracer) TraceCopyFromEnd(ctx context.Context, conn *pgx.Conn, data pgx.TraceCopyFromEndData) {
	_m.Called(ctx, conn, data)
}

// MockTracer_TraceCopyFromEnd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TraceCopyFromEnd'
type MockTracer_TraceCopyFromEnd_Call struct {
	*mock.Call
}

// TraceCopyFromEnd is a helper method to define mock.On call
//   - ctx context.Context
//   - conn *pgx.Conn
//   - data pgx.TraceCopyFromEndData
func (_e *MockTracer_Expecter) TraceCopyFromEnd(ctx interface{}, conn interface{}, data interface{}) *MockTracer_TraceCopyFromEnd_Call {
	return &MockTracer_TraceCopyFromEnd_Call{Call: _e.mock.On("TraceCopyFromEnd", ctx, conn, data)}
}

func (_c *MockTracer_TraceCopyFromEnd_Call) Run(run func(ctx context.Context, conn *pgx.Conn, data pgx.TraceCopyFromEndData)) *MockTracer_TraceCopyFromEnd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pgx.Conn), args[2].(pgx.TraceCopyFromEndData))
	})
	return _c
}

func (_c *MockTracer_TraceCopyFromEnd_Call) Return() *MockTracer_TraceCopyFromEnd_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTracer_TraceCopyFromEnd_Call) RunAndReturn(run func(context.Context, *pgx.Conn, pgx.TraceCopyFromEndData)) *MockTracer_TraceCopyFromEnd_Call {
	_c.Run(run)
	return _c
}

// TraceCopyFromStart provides a mock function with given fields: ctx, conn, data
func (_m *MockTracer) TraceCopyFromStart(ctx context.Context, conn *pgx.Conn, data pgx.TraceCopyFromStartData) context.Context {
	ret := _m.Called(ctx, conn, data)

	if len(ret) == 0 {
		panic("no return value specified for TraceCopyFromStart")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context, *pgx.Conn, pgx.TraceCopyFromStartData) context.Context); ok {
		r0 = rf(ctx, conn, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// MockTracer_TraceCopyFromStart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TraceCopyFromStart'
type MockTracer_TraceCopyFromStart_Call struct {
	*mock.Call
}

// TraceCopyFromStart is a helper method to define mock.On call
//   - ctx context.Context
//   - conn *pgx.Conn
//   - data pgx.TraceCopyFromStartData
func (_e *MockTracer_Expecter) TraceCopyFromStart(ctx interface{}, conn interface{}, data interface{}) *MockTracer_TraceCopyFromStart_Call {
	return &MockTracer_TraceCopyFromStart_Call{Call: _e.mock.On("TraceCopyFromStart", ctx, conn, data)}
}

func (_c *MockTracer_TraceCopyFromStart_Call) Run(run func(ctx context.Context, conn *pgx.Conn, data pgx.TraceCopyFromStartData)) *MockTracer_TraceCopyFromStart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pgx.Conn), args[2].(pgx.TraceCopyFromStartData))
	})
	return _c
}

func (_c *MockTracer_TraceCopyFromStart_Call) Return(_a0 context.Context) *MockTracer_TraceCopyFromStart_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTracer_TraceCopyFromStart_Call) RunAndReturn(run func(context.Context, *pgx.Conn, pgx.TraceCopyFromStartData) context.Context) *MockTracer_TraceCopyFromStart_Call {
	_c.Call.Return(run)
	return _c
}

// TracePrepareEnd provides a mock function with given fields: ctx, conn, data
func (_m *MockTracer) TracePrepareEnd(ctx context.Context, conn *pgx.Conn, data pgx.TracePrepareEndData) {
	_m.Called(ctx, conn, data)
}

// MockTracer_TracePrepareEnd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TracePrepareEnd'
type MockTracer_TracePrepareEnd_Call struct {
	*mock.Call
}

// TracePrepareEnd is a helper method to define mock.On call
//   - ctx context.Context
//   - conn *pgx.Conn
//   - data pgx.TracePrepareEndData
func (_e *MockTracer_Expecter) TracePrepareEnd(ctx interface{}, conn interface{}, data interface{}) *MockTracer_TracePrepareEnd_Call {
	return &MockTracer_TracePrepareEnd_Call{Call: _e.mock.On("TracePrepareEnd", ctx, conn, data)}
}

func (_c *MockTracer_TracePrepareEnd_Call) Run(run func(ctx context.Context, conn *pgx.Conn, data pgx.TracePrepareEndData)) *MockTracer_TracePrepareEnd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pgx.Conn), args[2].(pgx.TracePrepareEndData))
	})
	return _c
}

func (_c *MockTracer_TracePrepareEnd_Call) Return() *MockTracer_TracePrepareEnd_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTracer_TracePrepareEnd_Call) RunAndReturn(run func(context.Context, *pgx.Conn, pgx.TracePrepareEndData)) *MockTracer_TracePrepareEnd_Call {
	_c.Run(run)
	return _c
}

// TracePrepareStart provides a mock function with given fields: ctx, conn, data
func (_m *MockTracer) TracePrepareStart(ctx context.Context, conn *pgx.Conn, data pgx.TracePrepareStartData) context.Context {
	ret := _m.Called(ctx, conn, data)

	if len(ret) == 0 {
		panic("no return value specified for TracePrepareStart")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context, *pgx.Conn, pgx.TracePrepareStartData) context.Context); ok {
		r0 = rf(ctx, conn, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// MockTracer_TracePrepareStart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TracePrepareStart'
type MockTracer_TracePrepareStart_Call struct {
	*mock.Call
}

// TracePrepareStart is a helper method to define mock.On call
//   - ctx context.Context
//   - conn *pgx.Conn
//   - data pgx.TracePrepareStartData
func (_e *MockTracer_Expecter) TracePrepareStart(ctx interface{}, conn interface{}, data interface{}) *MockTracer_TracePrepareStart_Call {
	return &MockTracer_TracePrepareStart_Call{Call: _e.mock.On("TracePrepareStart", ctx, conn, data)}
}

func (_c *MockTracer_TracePrepareStart_Call) Run(run func(ctx context.Context, conn *pgx.Conn, data pgx.TracePrepareStartData)) *MockTracer_TracePrepareStart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pgx.Conn), args[2].(pgx.TracePrepareStartData))
	})
	return _c
}

func (_c *MockTracer_TracePrepareStart_Call) Return(_a0 context.Context) *MockTracer_TracePrepareStart_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTracer_TracePrepareStart_Call) RunAndReturn(run func(context.Context, *pgx.Conn, pgx.TracePrepareStartData) context.Context) *MockTracer_TracePrepareStart_Call {
	_c.Call.Return(run)
	return _c
}

// TraceQueryEnd provides a mock function with given fields: ctx, conn, data
func (_m *MockTracer) TraceQueryEnd(ctx context.Context, conn *pgx.Conn, data pgx.TraceQueryEndData) {
	_m.Called(ctx, conn, data)
}

// MockTracer_TraceQueryEnd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TraceQueryEnd'
type MockTracer_TraceQueryEnd_Call struct {
	*mock.Call
}

// TraceQueryEnd is a helper method to define mock.On call
//   - ctx context.Context
//   - conn *pgx.Conn
//   - data pgx.TraceQueryEndData
func (_e *MockTracer_Expecter) TraceQueryEnd(ctx interface{}, conn interface{}, data interface{}) *MockTracer_TraceQueryEnd_Call {
	return &MockTracer_TraceQueryEnd_Call{Call: _e.mock.On("TraceQueryEnd", ctx, conn, data)}
}

func (_c *MockTracer_TraceQueryEnd_Call) Run(run func(ctx context.Context, conn *pgx.Conn, data pgx.TraceQueryEndData)) *MockTracer_TraceQueryEnd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pgx.Conn), args[2].(pgx.TraceQueryEndData))
	})
	return _c
}

func (_c *MockTracer_TraceQueryEnd_Call) Return() *MockTracer_TraceQueryEnd_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTracer_TraceQueryEnd_Call) RunAndReturn(run func(context.Context, *pgx.Conn, pgx.TraceQueryEndData)) *MockTracer_TraceQueryEnd_Call {
	_c.Run(run)
	return _c
}

// TraceQueryStart provides a mock function with given fields: ctx, conn, data
func (_m *MockTracer) TraceQueryStart(ctx context.Context, conn *pgx.Conn, data pgx.TraceQueryStartData) context.Context {
	ret := _m.Called(ctx, conn, data)

	if len(ret) == 0 {
		panic("no return value specified for TraceQueryStart")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context, *pgx.Conn, pgx.TraceQueryStartData) context.Context); ok {
		r0 = rf(ctx, conn, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// MockTracer_TraceQueryStart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TraceQueryStart'
type MockTracer_TraceQueryStart_Call struct {
	*mock.Call
}

// TraceQueryStart is a helper method to define mock.On call
//   - ctx context.Context
//   - conn *pgx.Conn
//   - data pgx.TraceQueryStartData
func (_e *MockTracer_Expecter) TraceQueryStart(ctx interface{}, conn interface{}, data interface{}) *MockTracer_TraceQueryStart_Call {
	return &MockTracer_TraceQueryStart_Call{Call: _e.mock.On("TraceQueryStart", ctx, conn, data)}
}

func (_c *MockTracer_TraceQueryStart_Call) Run(run func(ctx context.Context, conn *pgx.Conn, data pgx.TraceQueryStartData)) *MockTracer_TraceQueryStart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pgx.Conn), args[2].(pgx.TraceQueryStartData))
	})
	return _c
}

func (_c *MockTracer_TraceQueryStart_Call) Return(_a0 context.Context) *MockTracer_TraceQueryStart_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTracer_TraceQueryStart_Call) RunAndReturn(run func(context.Context, *pgx.Conn, pgx.TraceQueryStartData) context.Context) *MockTracer_TraceQueryStart_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTracer creates a new instance of MockTracer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTracer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTracer {
	mock := &MockTracer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
