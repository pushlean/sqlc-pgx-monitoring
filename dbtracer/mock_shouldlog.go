// Code generated by mockery. DO NOT EDIT.

package dbtracer

import mock "github.com/stretchr/testify/mock"

// MockShouldLog is an autogenerated mock type for the ShouldLog type
type MockShouldLog struct {
	mock.Mock
}

type MockShouldLog_Expecter struct {
	mock *mock.Mock
}

func (_m *MockShouldLog) EXPECT() *MockShouldLog_Expecter {
	return &MockShouldLog_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: err
func (_m *MockShouldLog) Execute(err error) bool {
	ret := _m.Called(err)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(error) bool); ok {
		r0 = rf(err)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockShouldLog_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockShouldLog_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - err error
func (_e *MockShouldLog_Expecter) Execute(err interface{}) *MockShouldLog_Execute_Call {
	return &MockShouldLog_Execute_Call{Call: _e.mock.On("Execute", err)}
}

func (_c *MockShouldLog_Execute_Call) Run(run func(err error)) *MockShouldLog_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *MockShouldLog_Execute_Call) Return(_a0 bool) *MockShouldLog_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockShouldLog_Execute_Call) RunAndReturn(run func(error) bool) *MockShouldLog_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockShouldLog creates a new instance of MockShouldLog. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockShouldLog(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockShouldLog {
	mock := &MockShouldLog{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
